service: url-shortner
provider:
  name: aws
  runtime: nodejs18.x
  region: ap-south-1
  deploymentBucket:
    name: url-shortner-hkm-0101
  deploymentPrefix: url-shortner-api
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
            - ""
            - - "https://cognito-idp."
              - "${self:provider.region}"
              - ".amazonaws.com/"
              - !Ref UserPool
        audience: !Ref MyUserPoolClient
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:List*
        - dynamodb:DescribeReservedCapacity*
        - dynamodb:DescribeLimits
        - dynamodb:DescribeTimeToLive
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/shorten-urls*
    - Effect: Allow
      Action: lambda:InvokeFunction
      Resource:
        - arn:aws:events:${self:provider.region}:${aws:accountId}:function:url-shortner-dev-user-stats
      Condition:
        StringEquals:
          aws:ResourceTag/Name: "url-shortner-stats"
    - Effect: Allow
      Action:
        - s3:ListAllMyBuckets
        - s3:ListBucket
      Resource: arn:aws:s3:::*
    - Effect: Allow
      Action: s3:*
      Resource:
        - arn:aws:s3:::url-shortner-stats/*
    - Effect: Allow
      Action: ses:sendMail
      Resource:
        - arn:aws:ses:${self:provider.region}:${aws:accountId}:identity/${self:provider.environment.AWS_SES_IDENTITY}
  environment:
    USER_POOL_CLIENT_ID: !Ref MyUserPoolClient
    USER_POOL_ID: !Ref UserPool
    BASIC_USER_ALLOWED_URLS: 100
    SHORTNER_URLS_TABLE: shorten-urls
    SHORTNER_URLS_USERS_TABLE: shorten-urls-users
    ADMIN_STATS_TABLE: shorten-urls-admin-matrix
    AWS_SES_IDENTITY: himanshumittal2014@gmail.com
    BASE_URL: d1bir1axwjid52.cloudfront.net/api
    STATS_BUCKET: url-shortner-stats
functions:
  healthCheck:
    handler: src/healthCheck.ping
    events:
      - httpApi:
          path: /api/ping
          method: get
  addUrl:
    handler: src/url/addUrl.addUrl
    events:
      - httpApi:
          path: /api/urls
          method: put
          authorizer: serviceAuthorizer
  getUrl:
    handler: src/url/getUrl.getUrl
    events:
      - httpApi:
          path: /api/urls
          method: get
          authorizer: serviceAuthorizer
  deleteUrl:
    handler: src/url/deleteUrl.deleteUrl
    events:
      - httpApi:
          path: /api/urls
          method: delete
          authorizer: serviceAuthorizer
  updateUrl:
    handler: src/url/updateUrl.updateUrl
    events:
      - httpApi:
          path: /api/urls
          method: post
          authorizer: serviceAuthorizer
  hitUrl:
    handler: src/url-shortner/hitUrl.hitUrl
    events:
      - httpApi:
          path: /api/{uuid}
          method: get
  dashboard:
    handler: src/user/dashboard.dashboard
    events:
      - httpApi:
          path: /api/user/me
          method: get
          authorizer: serviceAuthorizer
  signup:
    handler: src/user/signup.signup
    events:
      - httpApi:
          path: /api/user/signup
          method: post
  confirm-signup:
    handler: src/user/confirmSignup.confirmSignup
    events:
      - httpApi:
          path: /api/user/confirm-sign-up
          method: post
  signin:
    handler: src/user/signin.signin
    events:
      - httpApi:
          path: /api/user/sign-in
          method: post
  user-stats:
    handler: src/stats/stats.stats
    events:
      - schedule:
          name: url-shortner-stats
          rate: cron(1 0 * * ? *)
          # rate: cron(0/10 * * * ? *)
          description: "Runs the user stats Lambda function daily at 00:01"

resources:
  Resources:
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: url-shortner-users
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailConfiguration:
          EmailSendingAccount: DEVELOPER
          From: ${self:provider.environment.AWS_SES_IDENTITY}
          ReplyToEmailAddress: ${self:provider.environment.AWS_SES_IDENTITY}
          SourceArn: arn:aws:ses:${self:provider.region}:${aws:accountId}:identity/${self:provider.environment.AWS_SES_IDENTITY}
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: false
          - AttributeDataType: String
            DeveloperOnlyAttribute: false
            Mutable: true
            Name: "ROLE"
            Required: false
    MyUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      DependsOn:
        - UserPool
      Properties:
        ClientName: url-shortner-user-pool-client
        UserPoolId: !Ref UserPool
        GenerateSecret: false
        AllowedOAuthFlowsUserPoolClient: false
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        AccessTokenValidity: 1
        IdTokenValidity: 1
        RefreshTokenValidity: 30
        TokenValidityUnits:
          AccessToken: days
          IdToken: days
          RefreshToken: days
    UrlShortenTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SHORTNER_URLS_TABLE}
        AttributeDefinitions:
          - AttributeName: unique_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: unique_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    UrlShortenUsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SHORTNER_URLS_USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: unique_id
            AttributeType: S
        KeySchema:
          - AttributeName: unique_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    AdminStatsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ADMIN_STATS_TABLE}
        AttributeDefinitions:
          - AttributeName: matrix_type
            AttributeType: S
        KeySchema:
          - AttributeName: matrix_type
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.STATS_BUCKET}
#plugins:
#- serverless-offline
